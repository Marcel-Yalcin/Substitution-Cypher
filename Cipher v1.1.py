# Each character gets a 3-digit number. There are 10 possible 3-digit numbers per char, making it harder to crack the cipher.

# What's new: Ability to cipher/decipher lower case letters, numbers and punctuation marks.

from random import randint

ref = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
       'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
       ' ', ',','.','?','!',':',';','\'','"','(',')',
       '1','2','3','4','5','6','7','8','9','0'] #length: 73

# 10 sub-lists, 73 elements per list since they're 73 chars.
key = [['903', '366', '655', '290', '570', '755', '293', '730', '249', '162', '569', '324', '555', '592', '344', '894', '929', '240', '661', '732', '399', '520', '978', '148', '118', '175', '326', '201', '922', '421', '157', '132', '717', '110', '294', '591', '526', '949', '192', '219', '573', '637', '483', '684', '789', '288', '976', '364', '574', '454', '486', '107', '744', '149', '916', '350', '465', '810', '704', '897', '800', '338', '666', '237', '843', '745', '545', '642', '176', '459', '461', '373', '202'] ,
['660', '842', '489', '493', '523', '625', '980', '367', '846', '218', '341', '496', '470', '138', '984', '268', '992', '136', '623', '808', '955', '308', '484', '416', '254', '469', '765', '440', '895', '677', '954', '731', '398', '785', '210', '714', '728', '741', '505', '355', '753', '318', '186', '170', '174', '538', '212', '100', '799', '898', '855', '982', '133', '187', '328', '553', '838', '960', '438', '588', '183', '868', '506', '994', '105', '330', '241', '420', '778', '533', '653', '876', '998'] ,
['379', '472', '405', '599', '647', '356', '357', '701', '878', '231', '669', '369', '987', '402', '958', '479', '896', '718', '825', '941', '223', '419', '921', '235', '617', '386', '488', '774', '629', '672', '624', '605', '739', '874', '195', '494', '667', '995', '867', '401', '274', '722', '106', '598', '216', '258', '788', '455', '445', '331', '430', '190', '335', '557', '767', '707', '658', '491', '456', '515', '319', '720', '169', '900', '126', '418', '289', '411', '952', '474', '796', '594', '448'] ,
['696', '112', '829', '234', '159', '631', '151', '259', '144', '239', '271', '579', '986', '222', '556', '738', '511', '587', '953', '260', '841', '712', '391', '853', '891', '432', '286', '532', '153', '823', '902', '887', '733', '966', '548', '626', '783', '820', '114', '864', '944', '595', '892', '104', '179', '490', '375', '636', '659', '343', '146', '397', '382', '713', '805', '204', '446', '327', '458', '437', '615', '608', '866', '649', '365', '828', '188', '566', '959', '536', '562', '687', '612'] ,
['970', '339', '263', '185', '542', '582', '815', '316', '177', '137', '834', '835', '378', '681', '989', '716', '736', '145', '905', '299', '119', '678', '549', '103', '604', '794', '908', '408', '930', '650', '710', '221', '692', '561', '480', '390', '981', '644', '535', '910', '568', '388', '893', '609', '450', '358', '158', '685', '292', '337', '467', '400', '431', '251', '232', '208', '115', '818', '238', '513', '983', '907', '109', '291', '743', '839', '781', '807', '700', '747', '410', '750', '601'] ,
['409', '305', '460', '607', '725', '463', '990', '831', '111', '473', '354', '596', '206', '264', '752', '345', '814', '189', '381', '298', '729', '967', '679', '869', '957', '142', '424', '161', '676', '269', '772', '656', '877', '236', '322', '885', '695', '125', '761', '262', '348', '654', '705', '698', '442', '462', '652', '371', '948', '443', '756', '671', '726', '360', '675', '673', '884', '563', '974', '304', '749', '495', '449', '267', '282', '487', '782', '196', '851', '509', '590', '317', '512'] ,
['228', '250', '931', '198', '861', '152', '284', '773', '560', '332', '539', '762', '171', '394', '845', '777', '257', '939', '312', '383', '914', '964', '913', '694', '665', '956', '275', '499', '803', '844', '969', '540', '403', '370', '606', '518', '325', '311', '173', '247', '524', '349', '688', '680', '906', '404', '798', '620', '613', '571', '197', '514', '664', '150', '351', '963', '697', '646', '724', '546', '160', '627', '787', '912', '122', '121', '640', '836', '924', '393', '619', '243', '227'] ,
['830', '464', '276', '457', '977', '583', '577', '261', '813', '413', '168', '352', '991', '551', '746', '786', '702', '310', '537', '226', '200', '329', '485', '972', '643', '500', '531', '950', '333', '879', '567', '641', '428', '971', '194', '277', '757', '140', '840', '859', '812', '668', '988', '368', '552', '734', '802', '727', '321', '775', '965', '154', '645', '123', '246', '737', '425', '763', '857', '507', '585', '182', '801', '116', '541', '578', '760', '265', '336', '937', '191', '407', '426'] ,
['392', '147', '611', '899', '584', '272', '890', '850', '248', '691', '395', '945', '935', '278', '847', '564', '477', '129', '925', '911', '131', '225', '735', '492', '863', '302', '674', '699', '968', '503', '516', '295', '909', '353', '670', '435', '270', '347', '519', '164', '888', '521', '439', '314', '723', '233', '709', '205', '793', '854', '101', '229', '754', '498', '429', '117', '466', '882', '792', '346', '361', '517', '547', '522', '502', '719', '621', '544', '721', '809', '993', '529', '285'] ,
['273', '758', '323', '947', '476', '309', '504', '242', '301', '141', '943', '715', '180', '938', '920', '128', '817', '279', '919', '415', '648', '901', '634', '565', '708', '946', '163', '501', '860', '593', '244', '127', '942', '804', '427', '628', '819', '639', '468', '576', '172', '780', '385', '165', '936', '452', '287', '706', '300', '806', '933', '134', '683', '527', '245', '791', '979', '973', '387', '307', '406', '849', '951', '768', '280', '751', '862', '827', '475', '203', '214', '412', '769']]

# Encryption
def encrypt(ref, key, text):
    for i in range(len(text)):
        list_choice = randint(0,9) #Ex. Chooses one of the 10 lists for letter A.
        for j in range(len(ref)):
            if text[i] == ref[j]:
                text[i] = key[list_choice][j]

    return text
    
# Decryption
def decrypt(ref, key, text):
    text_list = []
    
    # Seperates text in list where each element is a 3-digit number.
    for i in range(3*(len(text)//3)): #Integer division will ensure all lists' lengts are treated as multiples of 3.
        if i % 3 == 0:
            text_list.append(text[i:i+3])
    
    # Searches for 3-digit number in the entire key list.
    for j in range(len(text_list)): #For each character in your text.
        for k in range(len(key)): #For each sub-list in key.
            for l in range(len(key[k])): #For each element of each sub-list.
                if text_list[j] == key[k][l]:
                    text_list[j] = ref[l] #(l) corresponds to the letter in the alphabet: link between ref and sub-lists in key.
    
    return text_list

# Main
while True:
    user_prompt = input("Encrypt (1) or decrypt (2): ")

    if user_prompt == "1":
        text = encrypt(ref, key, list(input("Enter: ")))
        text = "".join(str(element) for element in text) #to convert list to string
        print(text)
    elif user_prompt == "2":
        text_list = decrypt(ref, key, input("Enter: "))
        text_list = "".join(str(element) for element in text_list) #to convert list to string
        print(text_list)
    else:
        break



    


    




